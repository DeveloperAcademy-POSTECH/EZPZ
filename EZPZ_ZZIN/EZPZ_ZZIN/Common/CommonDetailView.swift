//
//  CommonDetailView.swift
//  EZPZ_ZZIN
//
//  Created by Ruyha on 2022/04/11.
//

import SwiftUI

struct CommonTendencyView: View {
    @Binding var name: String
    @Binding var pageNum : Int
    @Binding var challengeIcon : String
    @Binding var accumulativeSum: Int
    var body: some View {
        
        let allString = "\(name).\n What is your character"
        let partialString = "character"
        let mainText = partialColorString(allString: allString, allStringColor: .white, partialString: partialString, partialStringColor: Color("ezpzLime"))
        // OnBoardingAssetsÏùò partialColorString()Ï∞∏Í≥†
        
        ZStack{
            
            VStack(alignment: .leading){
                
                
                Text(mainText)
                    .padding([.leading,.trailing])
                    .padding(.bottom,5)
                    .font(.custom("SpoqaHanSansNeo-Bold",size: 34))
                Text("Select one of these personalities below.")
                    .padding([.leading,.trailing])
                
                Spacer()
                Spacer()
                Spacer()
                
                VStack{
                    HStack{
                        CommonTendencynBtn(iCon: "üóø", msgText: "Serious", pageNum: $pageNum, challengeIcon: $challengeIcon) {
                            accumulativeSum += 0
                        }
                            .padding(.trailing, 2)
                        CommonTendencynBtn(iCon: "‚òÄÔ∏è", msgText: "Upbeat", pageNum: $pageNum, challengeIcon: $challengeIcon) {
                            accumulativeSum += 2
                        }
                    }.padding([.leading,.trailing],5)
                        .padding(.bottom,2)
                    HStack{
                        CommonTendencynBtn(iCon: "üèñ", msgText: "Free-spirited",pageNum: $pageNum, challengeIcon: $challengeIcon) {
                            accumulativeSum += 4
                        }
                            .padding(.trailing,2)
                        CommonTendencynBtn(iCon: "üòµ‚Äçüí´", msgText: "Indecisive",pageNum: $pageNum, challengeIcon: $challengeIcon) {
                            accumulativeSum += 8
                        }
                    }.padding([.leading,.trailing],5)
                        .padding(.bottom,2)
                    
                    HStack{
                        CommonTendencynBtn(iCon: "üôà", msgText: "Timid", pageNum: $pageNum, challengeIcon: $challengeIcon) {
                            accumulativeSum += 10
                        }
                            .padding(.trailing,2)
                        CommonTendencynBtn(iCon: "üëÄ", msgText: "None of these",pageNum: $pageNum, challengeIcon: $challengeIcon) {
                            accumulativeSum += 12
                        }
                    }.padding([.leading,.trailing],5)
                        .padding(.bottom,2)
                    
                }
                .padding(.bottom,UIScreen.main.bounds.height / 10)
                
                
            }
            .frame(maxWidth: .infinity, maxHeight: .infinity, alignment: .leading)
            .background(Color("ezpzBlack"))
            
        }
        
    }
}


struct CommonUserGroupView: View {
    
    let name: String
    @Binding var pageNum : Int
    @Binding var challengeIcon : String
    @Binding var accumulativeSum: Int
    
    var body: some View {
        
        let allString = "\(name) \nWhere do you belong ?"
        let partialString = "belong"
        let mainText = partialColorString(allString: allString, allStringColor: .white, partialString: partialString, partialStringColor: Color("ezpzLime"))
        // OnBoardingAssetsÏùò partialColorString()Ï∞∏Í≥†
        
        ZStack{
            
            VStack(alignment: .leading){
                
                
                
                Text(mainText)
                    .padding([.leading,.trailing])
                    .padding(.bottom,5)
                    .font(.custom("SpoqaHanSansNeo-Bold",size: 34))
                Text("Select a keyword that describes yourself")
                    .padding([.leading,.trailing])
                
                Spacer()
                Spacer()
                Spacer()
                
                VStack{
                    HStack{
                        CommonTendencynBtn(iCon: "üóø", msgText: "Teenager", pageNum: $pageNum, challengeIcon: $challengeIcon) {
                            accumulativeSum += 0
                        }
                            .padding(.trailing,2)
                        CommonTendencynBtn(iCon: "‚òÄÔ∏è", msgText: "Univ. student", pageNum: $pageNum, challengeIcon: $challengeIcon) {
                            accumulativeSum += 1
                        }
                    }.padding([.leading,.trailing],5)
                        .padding(.bottom,2)
                    HStack{
                        CommonTendencynBtn(iCon: "üèñ", msgText: "Office worker",  pageNum: $pageNum, challengeIcon: $challengeIcon)  {
                            accumulativeSum += 2
                        }
                            .padding(.trailing,2)
                        CommonTendencynBtn(iCon: "üòµ‚Äçüí´", msgText: "Job-seeker",  pageNum: $pageNum, challengeIcon: $challengeIcon) {
                            accumulativeSum += 3
                        }
                    }.padding([.leading,.trailing],5)
                        .padding(.bottom,2)
                    
                    HStack{
                        CommonTendencynBtn(iCon: "üôà", msgText: "Freelancer",  pageNum: $pageNum, challengeIcon: $challengeIcon) {
                            accumulativeSum += 4
                        }
                            .padding(.trailing,2)
                        CommonTendencynBtn(iCon: "üëÄ", msgText: "None of these",  pageNum: $pageNum, challengeIcon: $challengeIcon) {
                            accumulativeSum += 5
                        }
                    }.padding([.leading,.trailing],5)
                        .padding(.bottom,2)
                    
                }
                .padding(.bottom,UIScreen.main.bounds.height / 10)
                
                
                
            }
            .frame(maxWidth: .infinity, maxHeight: .infinity, alignment: .leading)
            .background(Color("ezpzBlack"))
            
        }
        
    }
}


struct CommonWantChallenge: View {
    
    var allString = "Is there a challenge \nyou want to try??"
    var partialString = "want to try"
    @Binding var pageNum : Int
    @Binding var isTemplateRecommended: Bool
    @Binding var accumulativeSum: Int
    
    var body: some View {
        let mainText = partialColorString(allString: allString, allStringColor: .white, partialString: partialString, partialStringColor: Color("ezpzLime"))
        // OnBoardingAssetsÏùò partialColorString()Ï∞∏Í≥†
        
        
        VStack(alignment: .leading){
            
            Text(mainText)
                .padding([.leading,.trailing,.bottom])
                .font(.custom("SpoqaHanSansNeo-Bold",size: 34))
            
            Spacer()
            OnBoardingMainButtonWithCustomAction(iCon: "üî•", msgText: "Yes, I have a challenge To-Do!", pageNum: $pageNum) {
                print("Yes, I have a challenge to do!")
                accumulativeSum += 3
                isTemplateRecommended = false
            }
            .padding(.bottom,2)
            OnBoardingMainButtonWithCustomAction(iCon: "ü§ô", msgText: "No! I need a recommendation.", pageNum: $pageNum, customAction: {
                print("No, I need a recommendation.")
                accumulativeSum += 0
                isTemplateRecommended = true
            })
                .padding(.bottom,UIScreen.main.bounds.height / 10)
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity, alignment: .leading)
        .background(Color("ezpzBlack"))
        
        
    }
    
    
}



struct CommonUserFieldView: View {
    
    @Binding var pageNum : Int
    @Binding var challengeIcon : String
    @Binding var isTemplateRecommended: Bool
    @Binding var accumulativeSum: Int

    var body: some View {
        
        let allString = "Select a field \nyou want to challenge"
        let partialString = "want to challenge"
        let mainText = partialColorString(allString: allString, allStringColor: .white, partialString: partialString, partialStringColor: Color("ezpzLime"))
        // OnBoardingAssetsÏùò partialColorString()Ï∞∏Í≥†
        
        ZStack {
            
            VStack(alignment: .leading) {
                
                Text(mainText)
                    .padding([.leading,.trailing])
                    .padding(.bottom,5)
                    .font(.custom("SpoqaHanSansNeo-Bold",size: 34))
                Text("Choose one of these categories.")
                    .padding([.leading,.trailing])
                
                Spacer()
                Spacer()
                Spacer()
                
                VStack{
                    HStack{
                        CommonTendencynBtn2(iCon: "‚öΩÔ∏è", msgText: "Workout", pageNum: $pageNum, challengeIcon: $challengeIcon, isTemplateRecommended: $isTemplateRecommended) {
                            accumulativeSum += 0
                        }
                            .padding(.trailing,2)
                        CommonTendencynBtn2(iCon: "ü•ó", msgText: "Health", pageNum: $pageNum, challengeIcon: $challengeIcon, isTemplateRecommended: $isTemplateRecommended) {
                            accumulativeSum += 1
                        }
                    }.padding([.leading,.trailing],5)
                        .padding(.bottom,2)
                    HStack{
                        CommonTendencynBtn2(iCon: "üìí", msgText: "Study", pageNum: $pageNum, challengeIcon: $challengeIcon, isTemplateRecommended: $isTemplateRecommended) {
                            accumulativeSum += 2
                        }
                            .padding(.trailing,2)
                        CommonTendencynBtn2(iCon: "‚è≥", msgText: "Habits", pageNum: $pageNum, challengeIcon: $challengeIcon, isTemplateRecommended: $isTemplateRecommended) {
                            accumulativeSum += 3
                        }
                    }.padding([.leading,.trailing],5)
                        .padding(.bottom,2)
                    
                    HStack{
                        CommonTendencynBtn2(iCon: "üëÄ", msgText: "None of them", pageNum: $pageNum, challengeIcon: $challengeIcon, isTemplateRecommended: $isTemplateRecommended) {
                            accumulativeSum += 4
                        }
                            .padding(.trailing,UIScreen.main.bounds.width / 2 + 2)
                        
                        
                        
                        // CommonTendencynBtn(iCon: "üëÄ", msgText: "Ïù¥ Ï§ëÏóê ÏóÜÏñ¥Ïöî.")
                    }.padding([.leading,.trailing],5)
                    
                }
                .padding(.bottom,UIScreen.main.bounds.height / 10)
            }
            .frame(maxWidth: .infinity, maxHeight: .infinity, alignment: .leading)
            .background(Color("ezpzBlack"))
            
        }
    }
}


// TODO: - ÌïòÍ≥†Ïã∂ÏùÄ ÎèÑÏ†ÑÏùò Ïú†Î¨¥Ïóê Îî∞Îùº ÎèÑÏ†Ñ Î™ÖÏùÑ ÏûÖÎ†•ÌïòÎäî Î∑∞ÏôÄ ÌÖúÌîåÎ¶ø Î∑∞ Ï§ëÏóêÏÑú ÌïòÎÇòÎ°ú Í∞ÄÏïºÌïòÎäî ÏÉÅÌô©Ïù∏Îç∞, Ïñ¥Îñ§ Í∏∞Ï§ÄÏúºÎ°ú ÎÇòÎàå ÏßÄ
// Ïú†Ï†ÄÍ∞Ä ÏßÅÏ†ë ÎèÑÏ†Ñ ÎßåÎì§Í∏∞

struct CommonUserChallengeView: View {
    var allString = "What challenge \nare you on?"
    var partialString = "challenge"
    @Binding var challenge: String
    @Binding var pageNum : Int
    var body: some View {
        let mainText = partialColorString(allString: allString, allStringColor: .white, partialString: partialString, partialStringColor: Color("ezpzLime"))
        // OnBoardingAssetsÏùò partialColorString()Ï∞∏Í≥†
        
        ZStack{
            VStack(alignment: .leading){
                
                
                
                Text(mainText)
                    .padding([.leading,.trailing])
                    .padding(.bottom,5)
                    .font(.custom("SpoqaHanSansNeo-Bold",size: 34))
                Text("Let us know the title of the challenge.")
                    .padding([.leading,.trailing])
                Spacer()
                
                
                
                Text("Challenge title")
                    .font(.custom("SpoqaHanSansNeo-Bold",size: 17))
                    .padding([.leading,.trailing])
                TextField("Enter a challenge title", text: $challenge)
                    .keyboardType(.namePhonePad)
                    .submitLabel(.done)
                    .padding([.leading,.trailing])
                Divider()
                    .padding([.leading,.trailing])
                
                Spacer()
                Spacer()
                Spacer()
                if challenge != ""{
                    withAnimation {
                        CommonNextBtn(mainText: "Next", pageNum: $pageNum)
                    }
                }
                
            }
            .frame(maxWidth: .infinity, maxHeight: .infinity, alignment: .leading)
            .background(Color("ezpzBlack"))
            
        }
        
    }
}





// CommonChallengeTemplateViewÏïàÏóê Îì§Ïñ¥Í∞à
struct TemplateView: View {
    
    // ÌÖúÌîåÎ¶ø Î∞ñ
    var mainTitle: String
    
    // ÌÖúÌîåÎ¶ø Ïïà
    var title: String
    var categoryInform: String
    var todoRows: [String]
    var body: some View {
        
        VStack(alignment: .leading) {
            
                Text(mainTitle)
                    .font(.custom("SpoqaHanSansNeo-Bold", size: 17))
                    .foregroundColor(Color("ezpzLightgrey"))
                    .padding(.bottom, 15)
                    .padding(.top, 30)

                VStack{
                    ZStack{
                        Rectangle()
                            .foregroundColor(.white)
                            .frame(width: UIScreen.main.bounds.width * 4 / 5)
                            .cornerRadius(10)
                        
                        VStack(alignment: .leading, spacing: 10){
                            HStack(alignment: .top){
                                Text(title)
                                    .font(.custom("SpoqaHanSansNeo-Bold", size: 24))
                                    .padding(.leading, 20)
                                    .padding(.top, 20)
                            }
                            Text(categoryInform)
                                .font(.custom("SpoqaHanSansNeo-regular", size: 13))
                                .foregroundColor(ColorManage.ezpzSmokegrey)
                                .padding(.leading, 20)
                                .padding(.bottom, 18)
                            
                            
                            ForEach(todoRows, id: \.self) { todo in
                                Text(todo)
                                    .padding(.leading, 20)
                                Divider()
                                    .background(ColorManage.ezpzSmokegrey)
                            }
                                
                            }
                            Spacer()
                        }.foregroundColor(ColorManage.ezpzBlack)
                            .frame(height: UIScreen.main.bounds.height * 5 / 11)
                            
                    

                }
            
            
        }
    }
}

struct Template {
    let mainTitle: String
    let title: String
    let categoryInform: String
    let todoRows: [String]
    let index: Int
}

let A: [Template] = [
    Template(mainTitle: "üëç Îç§Î≤® ÌïòÎÇò ÎçúÏñ¥ÎÇ¥Í∏∞", title: "10kg ÎπºÍ∏∞", categoryInform: "Ïπ¥ÌÖåÍ≥†Î¶¨ Ïö¥Îèô", todoRows: ["ÌïòÎ£® Ìïú ÎÅº ÏÉêÎü¨Îìú", "Ï†ÄÎÖÅ Ïú†ÏÇ∞ÏÜå 30Î∂ÑÏî© ÌïòÍ∏∞", "Îß§Ïùº Îß®Î™∏Ïö¥Îèô 3ÏÑ∏Ìä∏Ïî© ÌïòÍ∏∞", "Îß§Ïùº ÏïÑÏπ® Í≥µÎ≥µ Î™∏Î¨¥Í≤å Ïû¨Í∏∞"], index: 0),
    Template(mainTitle: "üëç Ïù¥Ï†úÎäî ÎØ∏Î£∞ Ïàò ÏóÜÎã§", title: "Îß§Ïùº ÌïòÎäî ÏòÅÏñ¥ Í≥µÎ∂Ä", categoryInform: "Ïπ¥ÌÖåÍ≥†Î¶¨ Í≥µÎ∂Ä", todoRows: ["ÏòÅÎã®Ïñ¥ 20Í∞ú Ïô∏Ïö∞Í∏∞", "ÏòÅÏñ¥ Í∏∞ÏÇ¨ ÏùΩÍ∏∞", "BBC Îâ¥Ïä§ 1Í∞ú Î≥¥Í∏∞"], index: 1),
    Template(mainTitle: "üëç ÏùºÏ∞ç ÏùºÏñ¥ÎÇòÎäî ÏÉàÍ∞Ä ÏúºÏä§ÎåÑÎã§", title: "ÏñºÎ¶¨Î≤ÑÎìúÏùò ÏÇ∂", categoryInform: "Ïπ¥ÌÖåÍ≥†Î¶¨ Í≥µÎ∂Ä", todoRows: ["Îß§Ïùº 5Ïãú Í∏∞ÏÉÅ", "Ï°∞Í∞ÑÏã†Î¨∏ ÏùΩÍ∏∞", "Ìï¥ Îú®Îäî Í≤É ÏÇ¨ÏßÑÏ∞çÍ∏∞"], index: 2),
]

let B: [Template] = [
    Template(mainTitle: "üëç 30ÎßåÏõêÏùò ÌñâÎ≥µ", title: "ÌïúÎã¨ ÏãùÎπÑ 30ÎßåÏõêÏúºÎ°ú ÏÇ¥ÏïÑÎ≥¥Í∏∞", categoryInform: "Ïπ¥ÌÖåÍ≥†Î¶¨ ÏäµÍ¥Ä", todoRows: ["Ïû•Î≥¥Í∏∞", "ÌïòÎ£®Ïóê ÏßëÎ∞• 2Î≤à Î®πÍ∏∞", "Í∞ÄÍ≥ÑÎ∂Ä Ïì∞Í∏∞"], index: 0),
    Template(mainTitle: "üëç Ï†äÏùÄ ÎÇ†Ïùò Í∏∞Î°ù", title: "Î∞îÎîîÌîÑÎ°úÌïÑ Ï¥¨ÏòÅ", categoryInform: "Ïπ¥ÌÖåÍ≥†Î¶¨ Ïö¥Îèô", todoRows: ["Ìó¨Ïä§Ïû• Í∞ÄÍ∏∞", "Îã®Î∞±Ïßà Î≥¥Ï∂©Ï†ú Î®πÍ∏∞", "Ïû† ÏùºÏ∞ç ÏûêÍ∏∞(10Ïãú)", "Ïä§ÌäúÎîîÏò§ ÏÉÅÎã¥"], index: 1),
    Template(mainTitle: "üëç ÎÇ¥ÏùºÏùÄ ÎÇòÎèÑ ÌîºÏπ¥ÏÜå", title: "ÎìúÎ°úÏûâ Î∞∞Ïö∞Í∏∞", categoryInform: "Ïπ¥ÌÖåÍ≥†Î¶¨ Í≥µÎ∂Ä", todoRows: ["ÌïòÎ£®Ïóê ÌÅ¨Î°úÌÇ§ 3Í∞ú", "ÌÅ¨Î°úÌÇ§ ÏòÅÏÉÅ Î≥¥Í∏∞", "Ïù∏Ïä§ÌÉÄÏóê Í∑∏Î¶∞ Í≤É Ïò¨Î¶¨Í∏∞", "Ïó∞ÌïÑ ÍπçÍ∏∞"], index: 2),
]

let C: [Template] = [
    Template(mainTitle: "üëç Ïù¥Ï†úÎäî Ï±ôÍ∏∏ ÎÇòÏù¥", title: "Í±¥Í∞ï Ï±ôÍ∏∞Í∏∞", categoryInform: "Ïπ¥ÌÖåÍ≥†Î¶¨ Í±¥Í∞ï", todoRows: ["Îß§Ïùº ÏòÅÏñëÏ†ú", "ÏïÑÏπ® Îî∞ÎúªÌïú Î¨º", "ÌóàÎ¶¨ ÌïèÏûê"], index: 0),
    Template(mainTitle: "üëç Í≥µÏù∏Ï§ëÍ∞úÏÇ¨ Ìï©Í≤©ÏùÄ...?", title: "Í≥µÏù∏Ï§ëÍ∞úÏÇ¨ ÏûêÍ≤© Ï∑®ÎìùÌïòÍ∏∞", categoryInform: "Ïπ¥ÌÖåÍ≥†Î¶¨ Í≥µÎ∂Ä", todoRows: ["ÌïòÎ£®Ïóê Í∏∞Ï∂ú 20Î¨∏Ï†ú", "ÌïòÎ£®Ïóê Ïù∏Í∞ï 1Í∞ï Î≥¥Í∏∞", "Ïù∏Í∞ï ÎÅäÍ∏∞"], index: 1),
    Template(mainTitle: "üëç ÏæåÏ†ÅÌïú ÏÇ∂Ïùò ÏãúÏûë", title: "Ï†ïÎ¶¨ÌïòÍ∏∞", categoryInform: "Ïπ¥ÌÖåÍ≥†Î¶¨ ÏäµÍ¥Ä", todoRows: ["ÏïÑÏπ® Ïù¥Î∂ÄÏûêÎ¶¨ Ï†ïÎ¶¨", "Ï†ÄÎÖÅ ÎÇ¥Ïùº ÏùºÏ†ï ÌôïÏù∏ÌïòÍ∏∞", "Ï±ÖÏÉÅ Ï†ïÎ¶¨ÌïòÍ∏∞", "Î∞© Ï≤≠ÏÜåÌïòÍ∏∞"], index: 2),
]

let D: [Template] = [
    Template(mainTitle: "üëç 10Î∂ÑÎßå Í±∏Ïñ¥ÎèÑ Ïà®Ïù¥ Ï∞®Ïöî „Ö†„Ö†", title: "ÏùºÏÉÅÏÜçÏùò Ïö¥Îèô", categoryInform: "Ïπ¥ÌÖåÍ≥†Î¶¨ Ïö¥Îèô", todoRows: ["Ï∂úÌá¥Í∑º, Îì±ÍµêÏãú ÏóêÏä§Ïª¨Î†àÏù¥ÌÑ∞ ÎåÄÏã† Í≥ÑÎã®ÏùÑ Ïù¥Ïö©Ìï¥Ïöî", "ÏïÑÏπ® Î®πÍ∏∞Ï†Ñ 10Î∂ÑÏî© Î∞îÎã•ÏóêÏÑú Ïä§Ìä∏Î†àÏπ≠ÏùÑ Ìï¥Î¥êÏöî", "Ïä§Ìä∏Î†àÏπ≠ Ïú†ÌäúÎ∏å ÏòÅÏÉÅ ÌïòÎÇò Î≥¥Í∏∞"], index: 0),
    Template(mainTitle: "üëç ÏïÑ~ ÏÑºÎç∏Ìòï~", title: "‚ÄôÏ†ïÏùòÎûÄ Î¨¥ÏóáÏù∏Í∞Ä' ÏùΩÍ∏∞", categoryInform: "Ïπ¥ÌÖåÍ≥†Î¶¨ Í≥µÎ∂Ä", todoRows: ["Îß§Ïùº 20Î∂Ñ ÏùΩÍ∏∞", "Ìïú Ï§Ñ ÎèÖÌõÑÍ∞ê", "ÎèÖÏÑú Î™®ÏûÑ ÎÇòÍ∞ÄÍ∏∞ "], index: 1),
    Template(mainTitle: "üëç #Í¥ÄÎ¶¨ÌïòÎäîÎÇ®Ïûê", title: "ÎÜìÏπ† ÏàòÎèÑ ÏûàÎäî Í≤É", categoryInform: "Ïπ¥ÌÖåÍ≥†Î¶¨ ÏäµÍ¥Ä", todoRows: ["Ïßë Î∞ñÏóê ÎÇòÍ∞ÄÍ∏∞ Ï†Ñ ÏÑ†ÌÅ¨Î¶º Î∞îÎ•¥Í∏∞", "ÏÑ∏ÏàòÌï† Îïå, ÎààÏçπ Ï†ïÎ¶¨ÌïòÍ∏∞", "ÏûêÍ∏∞ Ï†Ñ ÏÜê, Î∞úÌÜ± ÌôïÏù∏ÌïòÍ∏∞", "ÏΩßÌÑ∏ Ï†ïÎ¶¨ÌïòÍ∏∞"], index: 2),
]

// ÌÖúÌîåÎ¶ø Ï∂îÏ≤ú Î∞õÍ∏∞

struct CommonChallengeTemplateView: View {
    
    @Environment(\.managedObjectContext) private var viewContext
    
    var allString = "Select a \nchallenge template"
    var partialString = "template"
    @Binding var challenge: String
    @Binding var pageNum : Int
    @Binding var accumulativeSum: Int
    @Binding var templateType: Int
    @Binding var templateIndex: Int
    
    var body: some View {
        let mainText = partialColorString(allString: allString, allStringColor: .white, partialString: partialString, partialStringColor: Color("ezpzLime"))
        // OnBoardingAssetsÏùò partialColorString()Ï∞∏Í≥†
        
        ZStack{
            VStack(alignment: .leading){
                
                Text(mainText)
                    .padding([.leading,.trailing])
                    .padding(.bottom,5)
                    .font(.custom("SpoqaHanSansNeo-Bold",size: 34))
                Text("You can customize the template later!")
                    .padding([.leading, .trailing])

                ScrollView(.horizontal, showsIndicators: false) {
                    HStack(spacing: 10) {
                        
                        if 0 <= accumulativeSum && accumulativeSum <= 6 {
                            ForEach(A, id: \.title) { template in
                                TemplateView(mainTitle: template.mainTitle, title: template.title, categoryInform: template.categoryInform, todoRows: template.todoRows)
                                    .onTapGesture {
                                        print(accumulativeSum)
                                        challenge = template.title
                                        templateType = 0
                                        templateIndex = template.index
                                        withAnimation {
                                            pageNum += 1
                                        }
                                    }
                            }
                        } else if 7 <= accumulativeSum && accumulativeSum <= 12 {
                            ForEach(B, id: \.title) { template in
                                TemplateView(mainTitle: template.mainTitle, title: template.title, categoryInform: template.categoryInform, todoRows: template.todoRows)
                                    .onTapGesture {
                                        print(accumulativeSum)
                                        challenge = template.title
                                        templateType = 1
                                        templateIndex = template.index
                                        withAnimation {
                                            pageNum += 1
                                        }
                                    }
                            }
                        } else if 13 <= accumulativeSum && accumulativeSum <= 18 {
                            ForEach(C, id: \.title) { template in
                                TemplateView(mainTitle: template.mainTitle, title: template.title, categoryInform: template.categoryInform, todoRows: template.todoRows)
                                    .onTapGesture {
                                        print(accumulativeSum)
                                        challenge = template.title
                                        templateType = 2
                                        templateIndex = template.index
                                        withAnimation {
                                            pageNum += 1
                                        }
                                    }
                            }
                        } else if 19 <= accumulativeSum && accumulativeSum <= 24 {
                            ForEach(D, id: \.title) { template in
                                TemplateView(mainTitle: template.mainTitle, title: template.title, categoryInform: template.categoryInform, todoRows: template.todoRows)
                                    .onTapGesture {
                                        print(accumulativeSum)
                                        challenge = template.title
                                        templateType = 3
                                        templateIndex = template.index
                                        withAnimation {
                                            pageNum += 1
                                        }
                                    }
                            }
                        }
                            
                    }.padding(.leading, 15)
                        
                } // ScrollView
                    
            } // VStack
                
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity, alignment: .leading)
        .background(Color("ezpzBlack"))
            
    }
}

struct CommonUserChallengeDateView: View {
    var allString = "Select a \nchallenge term"
    var partialString = "challenge term"
    
    //    @Binding var startDate = Date()
    //    @Binding var endDate = Date()
    //
    
    @Binding var startDate : Date
    @Binding var endDate : Date
    @Binding var pageNum : Int
    @Binding var toDayDate : Date // ÏÑ§Î™ÖÌïòÍ∏∞ÏóêÎäî ÏóêÎ©îÌïú..
    
    static let dateFormat: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "M.d.YYYY"
        return formatter
    }()
    
    var body: some View {
        let mainText = partialColorString(allString: allString, allStringColor: .white, partialString: partialString, partialStringColor: Color("ezpzLime"))
        // OnBoardingAssetsÏùò partialColorString()Ï∞∏Í≥†
        
        ZStack{
            VStack(alignment: .leading){
                Group{
                    Text(mainText)
                        .padding([.leading,.trailing])
                        .padding(.bottom,5)
                        .font(.custom("SpoqaHanSansNeo-Bold",size: 34))
                    Text("Short-term challenge is also possible")
                        .padding([.leading,.trailing])
                    Spacer()
                    Text("Start Date")
                        .font(.custom("SpoqaHanSansNeo-Bold",size: 16))
                        .padding([.leading,.trailing])
                    
                }
                Group{
                    VStack {
                        DatePicker(selection: $startDate, in: Date()...,displayedComponents: .date) {
                            if startDate == toDayDate{
                                Text("Select a start date.")
                                    .font(.custom("SpoqaHanSansNeo",size: 16))
                                    .foregroundColor(ColorManage.ezpzSmokegrey)
                                
                            }else{
                                Text("\(startDate, formatter: CommonUserChallengeDateView.dateFormat)")
                            }
                        }
                        
                    }
                } .padding([.leading,.trailing,.bottom])
                
                if startDate != toDayDate{
                    Text("End date")
                        .font(.custom("SpoqaHanSansNeo-Bold",size: 16))
                        .padding([.leading,.trailing])
                    Group{
                        VStack {
                            DatePicker(selection: $endDate, in: startDate..., displayedComponents: .date) {
                                if endDate == toDayDate{
                                    Text("Select a end date.")
                                        .font(.custom("SpoqaHanSansNeo",size: 16))
                                        .foregroundColor(ColorManage.ezpzSmokegrey)
                                }else{
                                    Text("\(endDate, formatter: CommonUserChallengeDateView.dateFormat)")
                                }
                            } //ÏïÑÏßÅ ÎØ∏ÏôÑÏûÖÎãàÎã§.
                            
                        }
                    }
                    .padding([.leading,.trailing])
                }
                Spacer()
                Spacer()
             
                if  startDate != toDayDate &&  endDate != toDayDate && startDate <= endDate{
                    withAnimation {
                        CommonNextBtn(mainText: "Done", pageNum: $pageNum)
                    }//Ï°∞Í±¥ Ï∂îÍ∞ÄÌï¥ÏïºÎê® Ïä§ÌÇµ
                }else if startDate != toDayDate && endDate != toDayDate && endDate < startDate{
                    Text("Please select the date again.")
                        .font(.custom("SpoqaHanSansNeo",size: 16))
                        .frame(minWidth: 0, maxWidth: .infinity, alignment: .center)
                        //.foregroundColor(ColorManage.ezpzSmokegrey)
                        .padding(.bottom,UIScreen.main.bounds.height / 10)
                }

            }
            .frame(maxWidth: .infinity, maxHeight: .infinity, alignment: .leading)
            .background(Color("ezpzBlack"))
            
        }
        
    }
}
